#!/usr/bin/env python

""" 
Usage: 
    gen_pseudo [--cutoff=<cutoff>] [options] repulsive <a> <EF> 
    gen_pseudo [options] attractive <a> <EF> <cutoff>
    gen_pseudo [options] bound <a> <cutoff>

Options:
    -c <cutoff>, --cutoff=<cutoff>  pseudopotential cutoff (only optional
                                    for the repulsive branch).
    -v, --verbose                   Add debugging information

See "gen_pseudo help <branch>" for information on 
arguments to a specific branch.
"""

from docopt import docopt

from contactpp import make_troullier_potential
from contactpp.outputs import print_for_casino


def validate_args_repulsive(**argv):
    a = float(argv["<a>"])
    Ef = float(argv["<EF>"])
    cutoff = argv["--cutoff"]
    if a <= 0.:
        raise ValueError("Scattering length <a> should be > 0.")
    if Ef <= 0.:
        raise ValueError("Ef should be > 0.")
    if cutoff is not None:
        cutoff = float(cutoff)
        if cutoff <= 0.:
            raise ValueError("Cutoff should be >= 0.")
    return a, Ef, cutoff

def validate_args_attractive(**argv):
    a = float(argv["<a>"])
    Ef = float(argv["<EF>"])
    cutoff = float(argv["<cutoff>"])
    if a >= 0.:
        raise ValueError("Scattering length <a> should be < 0.")
    if Ef <= 0.:
        raise ValueError("Ef should be > 0.")
    if cutoff <= 0.:
        raise ValueError("Cutoff must be > 0.")
    return a, Ef, cutoff

def validate_args_bound(**argv):
    a = float(argv["<a>"])
    cutoff = float(argv["<cutoff>"])
    if a <= 0.:
        raise ValueError("Scattering length <a> should be > 0.")
    if cutoff <= 0.:
        raise ValueError("Cutoff should be > 0.")
    return a, cutoff


def gen_pseudo_repulsive(**argv):
    a, Ef, cutoff = validate_args_repulsive(**argv)
    ppot = make_troullier_potential("repulsive",a,Ef,cutoff)
    print_for_casino(ppot)

def gen_pseudo_attractive(**argv):
    a, Ef, cutoff = validate_args_attractive(**argv)
    ppot = make_troullier_potential("attractive",a,Ef,cutoff)
    print_for_casino(ppot)

def gen_pseudo_bound(**argv):
    a, cutoff = validate_args_bound(**argv)
    ppot = make_troullier_potential("bound", a, cutoff=cutoff)
    print_for_casino(ppot)


if __name__ == "__main__":

    args = docopt(__doc__,options_first=True)
    if args["--verbose"]:
        print args

    if args["repulsive"]:
        gen_pseudo_repulsive(**args)
    if args["attractive"]: 
        gen_pseudo_attractive(**args)
    if args["bound"]:
        gen_pseudo_bound(**args)

